variables:
  GO_VERSION: '1.21'
  GONOSUMDB: gitlab.com
  GOPRIVATE: gitlab.com/iskaypetcom
  GITLAB_TOKEN: "${CICD_TOKEN}"

default:
  tags:
    - kubernetes-executor

before_script:
  - chmod -R 755 .gitlab

stages:
  - build
  - test

code_navigation:
  image: sourcegraph/lsif-go:latest
  stage: build
  allow_failure: true
  script:
    - .gitlab/code_navigation.sh
  artifacts:
    reports:
      lsif: dump.lsif

compile:
  stage: build
  image: docker.io/golang:${GO_VERSION}
  script:
    - .gitlab/build/compile.sh
  allow_failure: false
  only:
    - branches

unit:
  stage: test
  image: docker.io/golang:${GO_VERSION}
  variables:
    output: report.xml
  script:
    - .gitlab/test/unit.sh
  artifacts:
    when: always
    reports:
      junit: report.xml
  allow_failure: false
  only:
    - branches

coverage:
  stage: test
  image: docker.io/golang:${GO_VERSION}
  variables:
    output: coverage-report.out
    html: coverage-report.html
  script:
    - .gitlab/test/coverage.sh
  artifacts:
    paths:
      - coverage-report.html
  coverage: "/\\(statements\\)\\s+\\d+.?\\d+%/"
  allow_failure: false
  only:
    - branches

coverage-report:
  stage: test
  image: docker.io/golang:${GO_VERSION}
  script:
    - .gitlab/test/coverage-report.sh
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  only:
    - branches

race:
  stage: test
  image: docker.io/golang:${GO_VERSION}
  script:
    - .gitlab/test/race.sh
  allow_failure: false
  only:
    - branches

lint:
  stage: test
  image: golangci/golangci-lint:latest
  variables:
    output: gl-code-quality-report.json
  script:
    - .gitlab/test/lint.sh
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
  allow_failure: false
  only:
    - branches
